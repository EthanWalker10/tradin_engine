// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/persistence/tradeVariety_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	variety "github.com/yzimhao/trading_engine/v2/internal/models/variety"
)

// MockTradeVarietyRepository is a mock of TradeVarietyRepository interface.
type MockTradeVarietyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTradeVarietyRepositoryMockRecorder
}

// MockTradeVarietyRepositoryMockRecorder is the mock recorder for MockTradeVarietyRepository.
type MockTradeVarietyRepositoryMockRecorder struct {
	mock *MockTradeVarietyRepository
}

// NewMockTradeVarietyRepository creates a new mock instance.
func NewMockTradeVarietyRepository(ctrl *gomock.Controller) *MockTradeVarietyRepository {
	mock := &MockTradeVarietyRepository{ctrl: ctrl}
	mock.recorder = &MockTradeVarietyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeVarietyRepository) EXPECT() *MockTradeVarietyRepositoryMockRecorder {
	return m.recorder
}

// FindBySymbol mocks base method.
func (m *MockTradeVarietyRepository) FindBySymbol(ctx context.Context, symbol string) (*variety.TradeVariety, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBySymbol", ctx, symbol)
	ret0, _ := ret[0].(*variety.TradeVariety)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBySymbol indicates an expected call of FindBySymbol.
func (mr *MockTradeVarietyRepositoryMockRecorder) FindBySymbol(ctx, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBySymbol", reflect.TypeOf((*MockTradeVarietyRepository)(nil).FindBySymbol), ctx, symbol)
}
